{"ast":null,"code":"import axios from 'axios'; // const LOGIN_USER_KEY = 'LOGIN_USER_KEY';\n\nvar baseURL; // if (process.env.REACT_APP_ENVIRONMENT && process.env.REACT_APP_ENVIRONMENT === 'PRODUCTION') {\n//     baseURL = process.env.REACT_APP_API_BASE_URL;\n// } else {\n\nbaseURL = 'https://restore-cafe-backend-rahul.herokuapp.com/'; // }\n\nconst api = axios.create({\n  baseURL: baseURL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n/**\n * Add requireToken: true in request config, for API that required Authorization token\n */\n// api.interceptors.request.use(\n//     config => {\n//         if (config.requireToken && localStorage.getItem(LOGIN_USER_KEY)) {\n//             config.headers.common['Authorization'] = JSON.parse(localStorage.getItem(LOGIN_USER_KEY)).token;\n//         }\n//         return config;\n//     },\n//     err => {\n//         console.error(err);\n//     }\n// );\n\nexport default class API {\n  constructor() {\n    this.getPosts = async params => {\n      try {\n        const response = await api.get('/posts/', {\n          params\n        });\n        return response.data;\n      } catch (error) {\n        throw new Error(error);\n      }\n    };\n\n    this.addPost = async postBody => {\n      const formData = new FormData();\n\n      for (const key in postBody) {\n        formData.append(key, postBody[key]);\n      }\n\n      try {\n        const response = await api.post('/posts/add/', formData);\n        return response.data;\n      } catch (error) {\n        throw new Error(error);\n      }\n    };\n\n    this.deletePost = async id => {\n      try {\n        return await api.delete(`/posts/delete/${id}/`);\n      } catch (error) {\n        throw new Error(error);\n      }\n    };\n\n    this.getItems = async category => {\n      let url = '/item';\n\n      if (category) {\n        url += '?category=' + category;\n      }\n\n      const item = await api.get(url).then(response => {\n        return response.data;\n      }) // console.log(respone.data)\n      .catch(error => {\n        throw new Error(error);\n      });\n      return item;\n    };\n\n    this.getReviews = async item_id => {\n      let url = '/reviews?item_id=' + item_id;\n      const reviews = await api.get(url).then(response => {\n        // console.log('response', response);\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return reviews;\n    };\n\n    this.writeReview = async (item_id, name, body, like_count) => {\n      const formData = new FormData();\n      formData.append('item', item_id);\n      formData.append('name', name);\n      formData.append('body', body);\n      formData.append('like_count', like_count);\n      const savedReview = await api.post('/reviews/add/', formData).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return savedReview;\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/techi.s./Desktop/Projects/sd/practice-sd/frontend/src/API.js"],"names":["axios","baseURL","api","create","headers","API","getPosts","params","response","get","data","error","Error","addPost","postBody","formData","FormData","key","append","post","deletePost","id","delete","getItems","category","url","item","then","catch","getReviews","item_id","reviews","writeReview","name","body","like_count","savedReview"],"mappings":"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","sourcesContent":["import axios from 'axios';\n// const LOGIN_USER_KEY = 'LOGIN_USER_KEY';\n\nvar baseURL;\n// if (process.env.REACT_APP_ENVIRONMENT && process.env.REACT_APP_ENVIRONMENT === 'PRODUCTION') {\n//     baseURL = process.env.REACT_APP_API_BASE_URL;\n// } else {\nbaseURL = 'https://restore-cafe-backend-rahul.herokuapp.com/';\n// }\n\nconst api = axios.create({\n    baseURL: baseURL,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\n/**\n * Add requireToken: true in request config, for API that required Authorization token\n */\n// api.interceptors.request.use(\n//     config => {\n//         if (config.requireToken && localStorage.getItem(LOGIN_USER_KEY)) {\n//             config.headers.common['Authorization'] = JSON.parse(localStorage.getItem(LOGIN_USER_KEY)).token;\n//         }\n\n//         return config;\n//     },\n//     err => {\n//         console.error(err);\n//     }\n// );\n\nexport default class API {\n    getPosts = async params => {\n        try {\n            const response = await api.get('/posts/', { params });\n            return response.data;\n        } catch (error) {\n            throw new Error(error);\n        }\n    };\n    addPost = async postBody => {\n        const formData = new FormData();\n\n        for (const key in postBody) {\n            formData.append(key, postBody[key]);\n        }\n\n        try {\n            const response = await api.post('/posts/add/', formData);\n            return response.data;\n        } catch (error) {\n            throw new Error(error);\n        }\n    };\n    deletePost = async id => {\n        try {\n            return await api.delete(`/posts/delete/${id}/`);\n        } catch (error) {\n            throw new Error(error);\n        }\n    };\n\n    // ////////////////////////////////////\n    // Item\n    // ////////////////////////////////////\n\n    getItems = async category => {\n        let url = '/item';\n        if (category) {\n            url += '?category=' + category;\n        }\n        \n        const item = await api\n            .get(url)\n            .then(response => {\n                return response.data;\n            })\n            // console.log(respone.data)\n            .catch(error => {\n                throw new Error(error);\n            });\n        return item;\n    };\n    ////////////////////////////////\n    // Review\n    ////////////////////////////////\n    getReviews = async item_id => {\n        let url = '/reviews?item_id=' + item_id;\n        const reviews = await api\n            .get(url)\n            .then(response => {\n                // console.log('response', response);\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return reviews;\n    };\n    writeReview = async (item_id, name, body, like_count) => {\n        const formData = new FormData();\n        formData.append('item', item_id);\n        formData.append('name', name);\n        formData.append('body', body);\n        formData.append('like_count', like_count);\n        const savedReview = await api\n            .post('/reviews/add/', formData)\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return savedReview;\n    };\n}\n"]},"metadata":{},"sourceType":"module"}