{"ast":null,"code":"import axios from \"axios\"; // const LOGIN_USER_KEY = 'LOGIN_USER_KEY';\n\nvar baseURL; // if (process.env.REACT_APP_ENVIRONMENT && process.env.REACT_APP_ENVIRONMENT === 'PRODUCTION') {\n//     baseURL = process.env.REACT_APP_API_BASE_URL;\n// } else {\n\nbaseURL = \"https://backend-ali.herokuapp.com/\"; // }\n\nconst api = axios.create({\n  baseURL: baseURL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n/**\n * Add requireToken: true in request config, for API that required Authorization token\n */\n// api.interceptors.request.use(\n//     config => {\n//         if (config.requireToken && localStorage.getItem(LOGIN_USER_KEY)) {\n//             config.headers.common['Authorization'] = JSON.parse(localStorage.getItem(LOGIN_USER_KEY)).token;\n//         }\n//         return config;\n//     },\n//     err => {\n//         console.error(err);\n//     }\n// );\n\nexport default class API {\n  constructor() {\n    this.getPosts = async params => {\n      try {\n        const response = await api.get(\"/posts/\", {\n          params\n        });\n        return response.data;\n      } catch (error) {\n        throw new Error(error);\n      }\n    };\n\n    this.addPost = async postBody => {\n      const formData = new FormData();\n\n      for (const key in postBody) {\n        formData.append(key, postBody[key]);\n      }\n\n      try {\n        const response = await api.post(\"/posts/add/\", formData);\n        return response.data;\n      } catch (error) {\n        throw new Error(error);\n      }\n    };\n\n    this.deletePost = async id => {\n      try {\n        return await api.delete(`/posts/delete/${id}/`);\n      } catch (error) {\n        throw new Error(error);\n      }\n    };\n\n    this.getItems = async category => {\n      let url = \"/item\";\n\n      if (category) {\n        url += \"?category=\" + category;\n      }\n\n      const item = await api.get(url).then(response => {\n        return response.data;\n      }) // console.log(respone.data)\n      .catch(error => {\n        throw new Error(error);\n      });\n      return item;\n    };\n\n    this.getReviews = async item_id => {\n      let url = \"/reviews?item_id=\" + item_id;\n      const reviews = await api.get(url).then(response => {\n        // console.log('response', response);\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return reviews;\n    };\n\n    this.writeReview = async (item_id, name, body, like_count) => {\n      const formData = new FormData();\n      formData.append(\"item\", item_id);\n      formData.append(\"name\", name);\n      formData.append(\"body\", body);\n      formData.append(\"like_count\", like_count);\n      const savedReview = await api.post(\"/reviews/add/\", formData).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return savedReview;\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/techi.s./Desktop/Techis-Replit-QuickStart-Template/frontend/src/API.js"],"names":["axios","baseURL","api","create","headers","API","getPosts","params","response","get","data","error","Error","addPost","postBody","formData","FormData","key","append","post","deletePost","id","delete","getItems","category","url","item","then","catch","getReviews","item_id","reviews","writeReview","name","body","like_count","savedReview"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n// const LOGIN_USER_KEY = 'LOGIN_USER_KEY';\n\nvar baseURL;\n// if (process.env.REACT_APP_ENVIRONMENT && process.env.REACT_APP_ENVIRONMENT === 'PRODUCTION') {\n//     baseURL = process.env.REACT_APP_API_BASE_URL;\n// } else {\nbaseURL = \"https://backend-ali.herokuapp.com/\";\n// }\n\nconst api = axios.create({\n  baseURL: baseURL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n/**\n * Add requireToken: true in request config, for API that required Authorization token\n */\n// api.interceptors.request.use(\n//     config => {\n//         if (config.requireToken && localStorage.getItem(LOGIN_USER_KEY)) {\n//             config.headers.common['Authorization'] = JSON.parse(localStorage.getItem(LOGIN_USER_KEY)).token;\n//         }\n\n//         return config;\n//     },\n//     err => {\n//         console.error(err);\n//     }\n// );\n\nexport default class API {\n  getPosts = async (params) => {\n    try {\n      const response = await api.get(\"/posts/\", { params });\n      return response.data;\n    } catch (error) {\n      throw new Error(error);\n    }\n  };\n  addPost = async (postBody) => {\n    const formData = new FormData();\n\n    for (const key in postBody) {\n      formData.append(key, postBody[key]);\n    }\n\n    try {\n      const response = await api.post(\"/posts/add/\", formData);\n      return response.data;\n    } catch (error) {\n      throw new Error(error);\n    }\n  };\n  deletePost = async (id) => {\n    try {\n      return await api.delete(`/posts/delete/${id}/`);\n    } catch (error) {\n      throw new Error(error);\n    }\n  };\n\n  // ////////////////////////////////////\n  // Item\n  // ////////////////////////////////////\n\n  getItems = async (category) => {\n    let url = \"/item\";\n    if (category) {\n      url += \"?category=\" + category;\n    }\n\n    const item = await api\n      .get(url)\n      .then((response) => {\n        return response.data;\n      })\n      // console.log(respone.data)\n      .catch((error) => {\n        throw new Error(error);\n      });\n    return item;\n  };\n  ////////////////////////////////\n  // Review\n  ////////////////////////////////\n  getReviews = async (item_id) => {\n    let url = \"/reviews?item_id=\" + item_id;\n    const reviews = await api\n      .get(url)\n      .then((response) => {\n        // console.log('response', response);\n        return response.data;\n      })\n      .catch((error) => {\n        throw new Error(error);\n      });\n    return reviews;\n  };\n  writeReview = async (item_id, name, body, like_count) => {\n    const formData = new FormData();\n    formData.append(\"item\", item_id);\n    formData.append(\"name\", name);\n    formData.append(\"body\", body);\n    formData.append(\"like_count\", like_count);\n    const savedReview = await api\n      .post(\"/reviews/add/\", formData)\n      .then((response) => {\n        return response.data;\n      })\n      .catch((error) => {\n        throw new Error(error);\n      });\n    return savedReview;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}