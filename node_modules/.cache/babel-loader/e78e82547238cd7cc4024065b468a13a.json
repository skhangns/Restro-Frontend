{"ast":null,"code":"import axios from 'axios';\nconst LOGIN_USER_KEY = 'LOGIN_USER_KEY';\nvar baseURL; // if (process.env.REACT_APP_ENVIRONMENT && process.env.REACT_APP_ENVIRONMENT === 'PRODUCTION') {\n//     baseURL = process.env.REACT_APP_API_BASE_URL;\n// } else {\n\nbaseURL = 'https://restore-cafe-backend-rahul.herokuapp.com/'; // }\n\nconst api = axios.create({\n  baseURL: baseURL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n/**\n * Add requireToken: true in request config, for API that required Authorization token\n */\n\napi.interceptors.request.use(config => {\n  if (config.requireToken && localStorage.getItem(LOGIN_USER_KEY)) {\n    config.headers.common['Authorization'] = JSON.parse(localStorage.getItem(LOGIN_USER_KEY)).token;\n  }\n\n  return config;\n}, err => {\n  console.error(err);\n});\nexport default class API {\n  constructor() {\n    this.getPosts = async params => {\n      try {\n        const response = await api.get('/posts/', {\n          params\n        });\n        return response.data;\n      } catch (error) {\n        throw new Error(error);\n      }\n    };\n\n    this.addPost = async postBody => {\n      const formData = new FormData();\n\n      for (const key in postBody) {\n        formData.append(key, postBody[key]);\n      }\n\n      try {\n        const response = await api.post('/posts/add/', formData);\n        return response.data;\n      } catch (error) {\n        throw new Error(error);\n      }\n    };\n\n    this.deletePost = async id => {\n      try {\n        return await api.delete(`/posts/delete/${id}/`);\n      } catch (error) {\n        throw new Error(error);\n      }\n    };\n\n    this.getItems = async category => {\n      let url = '/item';\n\n      if (category) {\n        url += '?category=' + category;\n      }\n\n      const item = await api.get(url).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return item;\n    };\n\n    this.getReviews = async item_id => {\n      let url = '/reviews?item_id=' + item_id;\n      const reviews = await api.get(url).then(response => {\n        console.log('response', response);\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return reviews;\n    };\n\n    this.writeReview = async (item_id, name, body, like_count) => {\n      const formData = new FormData();\n      formData.append('item', item_id);\n      formData.append('name', name);\n      formData.append('body', body);\n      formData.append('like_count', like_count);\n      const savedReview = await api.post('/reviews/add/', formData).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return savedReview;\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/techi.s./Desktop/Projects/sd/practice-sd/frontend/src/API.js"],"names":["axios","LOGIN_USER_KEY","baseURL","api","create","headers","interceptors","request","use","config","requireToken","localStorage","getItem","common","JSON","parse","token","err","console","error","API","getPosts","params","response","get","data","Error","addPost","postBody","formData","FormData","key","append","post","deletePost","id","delete","getItems","category","url","item","then","catch","getReviews","item_id","reviews","log","writeReview","name","body","like_count","savedReview"],"mappings":"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","sourcesContent":["import axios from 'axios';\nconst LOGIN_USER_KEY = 'LOGIN_USER_KEY';\n\nvar baseURL;\n// if (process.env.REACT_APP_ENVIRONMENT && process.env.REACT_APP_ENVIRONMENT === 'PRODUCTION') {\n//     baseURL = process.env.REACT_APP_API_BASE_URL;\n// } else {\nbaseURL = 'https://restore-cafe-backend-rahul.herokuapp.com/';\n// }\n\nconst api = axios.create({\n    baseURL: baseURL,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\n/**\n * Add requireToken: true in request config, for API that required Authorization token\n */\napi.interceptors.request.use(\n    config => {\n        if (config.requireToken && localStorage.getItem(LOGIN_USER_KEY)) {\n            config.headers.common['Authorization'] = JSON.parse(localStorage.getItem(LOGIN_USER_KEY)).token;\n        }\n\n        return config;\n    },\n    err => {\n        console.error(err);\n    }\n);\n\nexport default class API {\n    getPosts = async params => {\n        try {\n            const response = await api.get('/posts/', { params });\n            return response.data;\n        } catch (error) {\n            throw new Error(error);\n        }\n    };\n    addPost = async postBody => {\n        const formData = new FormData();\n\n        for (const key in postBody) {\n            formData.append(key, postBody[key]);\n        }\n\n        try {\n            const response = await api.post('/posts/add/', formData);\n            return response.data;\n        } catch (error) {\n            throw new Error(error);\n        }\n    };\n    deletePost = async id => {\n        try {\n            return await api.delete(`/posts/delete/${id}/`);\n        } catch (error) {\n            throw new Error(error);\n        }\n    };\n\n    // ////////////////////////////////////\n    // Item\n    // ////////////////////////////////////\n\n    getItems = async category => {\n        let url = '/item';\n        if (category) {\n            url += '?category=' + category;\n        }\n        const item = await api\n            .get(url)\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return item;\n    };\n    ////////////////////////////////\n    // Review\n    ////////////////////////////////\n    getReviews = async item_id => {\n        let url = '/reviews?item_id=' + item_id;\n        const reviews = await api\n            .get(url)\n            .then(response => {\n                console.log('response', response);\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return reviews;\n    };\n    writeReview = async (item_id, name, body, like_count) => {\n        const formData = new FormData();\n        formData.append('item', item_id);\n        formData.append('name', name);\n        formData.append('body', body);\n        formData.append('like_count', like_count);\n        const savedReview = await api\n            .post('/reviews/add/', formData)\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return savedReview;\n    };\n}\n"]},"metadata":{},"sourceType":"module"}